import 'dart:async';
import 'dart:developer';
import 'dart:io';

import 'package:filmishorts/services/ad/ad_service.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:mobx/mobx.dart';
import 'package:showcaseview/showcaseview.dart';

import 'firebase_options.dart';
import 'services/core_service.dart';
import 'widgets/loading_widget.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_mobx/flutter_mobx.dart';
import 'screens/home_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'constants/assets.dart';
import 'store/global_state.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:http/http.dart' as http;

final ScrollController horizontalController = ScrollController();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  MobileAds.instance.initialize();

  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
    alert: true,
    badge: true,
    sound: true,
  );

  await FirebaseMessaging.instance.requestPermission();
  await FirebaseMessaging.instance.getInitialMessage();

  FirebaseAnalytics analytics = FirebaseAnalytics.instance;
  analytics.app.setAutomaticDataCollectionEnabled(true);

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  FirebaseMessaging.onMessage.listen(
    (RemoteMessage message) {
      log('foreground ${message.notification?.title}');

      if (Platform.isAndroid) {
        log('foreground${message.data}');

        flutterLocalNotificationsPlugin.show(
          message.hashCode,
          message.data['title'],
          '',
          // message.data['message'],
          NotificationDetails(
            android: AndroidNotificationDetails(
              channel.id,
              channel.name,

              channelDescription: channel.description,
              color: const Color.fromARGB(255, 233, 217, 223),

              largeIcon: const DrawableResourceAndroidBitmap(
                'notification_icon',
              ),
              groupKey: message.hashCode.toString(),
              icon: "notification_icon",
              playSound: true,
              importance: Importance.high,
              priority: Priority.high,

              // icon: 'ic_stat_name',
            ),
            iOS: const IOSNotificationDetails(
              presentSound: true,
              presentAlert: true,
              presentBadge: true,
            ),
          ),
          payload: message.data['redirect_id'],
        );
      }
    },
  );

  runApp(const MyApp());
}

final globalState = GlobalState();
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

const AndroidNotificationChannel channel = AndroidNotificationChannel(
  'high_importance_channel', // id
  'High Importance Notifications',
  description: // title
      'This channel is used for important notifications.', // description
  importance: Importance.high,
  playSound: true,
);

const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('notification_icon');

final InitializationSettings initializationSettings = InitializationSettings(
  android: initializationSettingsAndroid,
  iOS: initializationSettingsIOS,
);

IOSInitializationSettings initializationSettingsIOS =
    const IOSInitializationSettings(
  requestSoundPermission: true,
  requestBadgePermission: true,
  requestAlertPermission: true,
);

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();

  if (Platform.isAndroid) {
    log('foreground${message.data}');

    flutterLocalNotificationsPlugin.show(
      message.hashCode,
      message.data['title'],
      '',
      // message.data['message'],
      NotificationDetails(
        android: AndroidNotificationDetails(
          channel.id,
          channel.name,
          channelDescription: channel.description,
          color: Colors.pink.shade700,
          playSound: true,
          largeIcon: const DrawableResourceAndroidBitmap('notification_icon'),
          groupKey: message.hashCode.toString(),
          importance: Importance.high,
          icon: "notification_icon",
          priority: Priority.high,

          // icon: 'ic_stat_name',
        ),
        iOS: const IOSNotificationDetails(
          presentSound: true,
          presentAlert: true,
          presentBadge: true,
        ),
      ),
      payload: message.data['redirect_id'],
    );
  }
}

ThemeData _darkTheme = ThemeData(
  fontFamily: 'Montserrat',
  primaryColor: Colors.pink,
  primarySwatch: Colors.pink,
  brightness: Brightness.dark,
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ButtonStyle(
      backgroundColor: MaterialStateProperty.all(Colors.pink),
      padding: MaterialStateProperty.all(
        const EdgeInsets.all(16.0),
      ),
      shape: MaterialStateProperty.all(
        RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12.0),
        ),
      ),
    ),
  ),
);
ThemeData _lightTheme = ThemeData(
  fontFamily: 'Montserrat',
  primaryColor: Colors.pink,
  primarySwatch: Colors.pink,
  brightness: Brightness.light,
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ButtonStyle(
      backgroundColor: MaterialStateProperty.all(Colors.pink),
      padding: MaterialStateProperty.all(
        const EdgeInsets.all(16.0),
      ),
      shape: MaterialStateProperty.all(
        RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12.0),
        ),
      ),
    ),
  ),
);

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    onNotificationOpen();
    super.initState();
  }

  onNotificationOpen() async {
    var data =
        await flutterLocalNotificationsPlugin.getNotificationAppLaunchDetails();
    if (data?.payload != null) {
      globalState.setShortId(data?.payload);
    }

    const AndroidInitializationSettings initializationSettingsAndroid1 =
        AndroidInitializationSettings('notification_icon');
    IOSInitializationSettings initializationSettingsIOS1 =
        const IOSInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    final InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid1,
      iOS: initializationSettingsIOS1,
    );
    await flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onSelectNotification: (String? payload) async {
        log('flutterLocalNotificationsPlugin: onSelectNotification');
        globalState.setShortId(payload);
        Navigator.pushAndRemoveUntil(
          navigatorKey.currentContext!,
          MaterialPageRoute(
            builder: (_) => const HomeScreen(),
          ),
          (route) => false,
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Observer(
      builder: (_) => ShowCaseWidget(
        autoPlayLockEnable: globalState.isShowGuide,
        enableAutoScroll: false,
        onStart: (index, key) {
          log('onStart: $index, $key');

          if (index == 3 && pageController.page == 0) {
            horizontalController
                .jumpTo(horizontalController.position.maxScrollExtent);
          }
        },
        onComplete: (index, key) {
          log('onComplete: $index, $key');
          if (index == 6) {
            pageController.animateToPage(
              0,
              duration: const Duration(milliseconds: 1),
              curve: Curves.ease,
            );
          }
        },
        onFinish: () {
          log('onFinish Called');
          if (pageController.page == 0) {
            SharedPreferences.getInstance().then((value) {
              value.setBool('isGuideShow', false);
              globalState.setIsShowGuide(false);
            });
          }
        },
        blurValue: 0.0,
        autoPlayDelay: const Duration(seconds: 3),
        builder: Builder(
          builder: (context) => Observer(
            builder: (context) {
              return MaterialApp(
                navigatorKey: navigatorKey,
                theme: globalState.isDarkMode ? _darkTheme : _lightTheme,
                home: const SplashScreen(),
              );
            },
          ),
        ),
      ),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  init() async {
    await CoreServices.getBaseUrl();

    // globalState.getBaseUrl('http://202.38.173.158:10000/');
    // globalState.getBaseUrl('http://202.38.173.158/filmi-short/');
    // globalState.getBaseUrl('https://filmishorts.com/');
    SharedPreferences.getInstance().then(
      (prefs) async {
        globalState.getglobalState(
          prefs.getBool('isDarkModeOn') == true,
        );

        globalState.setIsShowGuide(prefs.getBool('isGuideShow') ?? true);
        log("accessToken: ${prefs.getBool('isLogin')}");

        globalState.setAccessToken(prefs.getString('access_token'));
        globalState.setFcmToken(prefs.getString('fcmToken'));
        globalState.setLogin(prefs.getBool('isLogin'));
        globalState.isSkipped(prefs.getString('skipped'));

        await getDeviceInfo();

        // Load ad unit id's
        await AdService.loadAdUnitIds();

        var message = await FirebaseMessaging.instance.getInitialMessage();
        if (message != null) {
          globalState.setShortId(message.data["redirect_id"]);
        }
        await Future.delayed(const Duration(milliseconds: 500));
        Navigator.pushAndRemoveUntil(
          context,
          PageRouteBuilder(
            pageBuilder: (context, animation1, animation2) =>
                // (prefs.getBool('showSplash') == null ||
                // prefs.getBool('showSplash') == true &&
                // globalState.accessToken == null)
                // ? const LoginScreen()
                // :
                const HomeScreen(),
            reverseTransitionDuration: Duration.zero,
          ),
          (route) => false,
        );
      },
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);

    await FirebaseMessaging.instance
        .setForegroundNotificationPresentationOptions(
      alert: true,
      badge: true,
      sound: true,
    );

    FirebaseMessaging.onMessageOpenedApp.listen((message) {
      globalState.setShortId(message.data["redirect_id"]);

      Navigator.pushAndRemoveUntil(
        navigatorKey.currentContext!,
        MaterialPageRoute(
          builder: (context) => const HomeScreen(),
        ),
        (route) => false,
      );
    });
  }

  bool showSplash = true;

  @override
  void initState() {
    super.initState();

    init();
    Timer(const Duration(milliseconds: 500), () {
      showSplash = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<SharedPreferences>(
      future: SharedPreferences.getInstance(),
      builder: (context, snapshot) {
        // bool? showSplash = snapshot.data?.getBool("showSplash");
        return (showSplash)
            ? Container(
                color: Colors.white,
                child: Image.asset(KAssets.splashGif),
                //  Stack(
                //   children: [
                //     Opacity(
                //       opacity: 0.1,
                //       child: Image.asset(
                //         KAssets.splashGraphics,
                //         width: double.infinity,
                //         fit: BoxFit.cover,
                //       ),
                //     ),
                //     Center(
                //       child: SvgPicture.asset(
                //         KAssets.logo,
                //         height: 120,
                //         color: Theme.of(context).primaryColor,
                //       ),
                //     ),
                //   ],
                // ),
              )
            : const LoadingWidget();
      },
    );
  }
}

void showSnackBar(context, title,
        {String? actionTitle, void Function()? onPressed}) =>
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8.0),
        ),
        margin: const EdgeInsets.all(8.0),
        behavior: SnackBarBehavior.floating,
        dismissDirection: DismissDirection.down,
        duration: const Duration(seconds: 3),
        backgroundColor: Theme.of(context).primaryColor,
        content: Text(
          title,
          style: Theme.of(context)
              .textTheme
              .bodyText1
              ?.copyWith(color: Colors.white),
        ),
        action: actionTitle != null && onPressed != null
            ? SnackBarAction(
                label: actionTitle,
                onPressed: onPressed,
                textColor: Colors.white,
              )
            : null,
      ),
    );

Future getDeviceInfo() async {
  try {
    const url = 'https://api.ipify.org';
    var response = await http.get(
      Uri.parse(url),
    );

    if (Platform.isAndroid) {
      globalState.setDevicePlatform('android');
      DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
      AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;
      if (response.statusCode == 200) {
        globalState.getDeviceInfo(response.body, androidInfo.model);
      }
    } else if (Platform.isIOS) {
      globalState.setDevicePlatform('ios');

      DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
      IosDeviceInfo iosInfo = await deviceInfo.iosInfo;
      if (response.statusCode == 200) {
        globalState.getDeviceInfo(response.body, iosInfo.model);
      }
    }
  } catch (e) {
    log(e.toString());
  }
}
